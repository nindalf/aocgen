#[allow(dead_code)]
fn part_1(input: &str) -> i32 \{
    0
}

#[allow(dead_code)]
fn part_2(input: &str) -> i32 \{
    0
}

#[cfg(test)]
mod tests \{
    use std::time::Instant;

    static TEST_INPUT: &str = include_str!("../inputs/day{n}-test.txt");
    static FULL_INPUT: &str = include_str!("../inputs/day{n}.txt");

    #[test]
    fn part_1_test() \{
        let output = super::part_1(TEST_INPUT);
        assert_eq!(output, 1234);
    }

    #[test]
    fn part_1() \{
        let start = Instant::now();
        let output = super::part_1(FULL_INPUT);
        assert_eq!(output, 1234);
        println!("Day {n} part 1 completed in \{:?}", start.elapsed());
    }

    #[test]
    fn part_2_test() \{
        let output = super::part_2(TEST_INPUT);
        assert_eq!(output, 1234);
    }

    #[test]
    fn part_2() \{
        let start = Instant::now();
        let output = super::part_2(FULL_INPUT);
        assert_eq!(output, 1234);
        println!("Day {n} part 2 completed in \{:?}", start.elapsed());
    }

}
